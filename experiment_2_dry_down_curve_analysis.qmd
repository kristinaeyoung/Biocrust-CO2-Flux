---
title: "experiment_2_dry_down_curve_analysis"
author: "CT"
date: "2023-11-28"
---
  
This code corresponds to Figure S3 and calculates values for Figure S2
The purpose of this code is to compile, analyze, and graph the dry
down curves for each biocrust and treatment type over the four month 
pulse manipulation experiment

```{r}
library("pracma")
library("drc")
```

Input crust mesocosm data

```{r}
pulse <- read.csv("experiment_2_dry_down_curve_1.csv",header=T)
pulse$TIMESTAMP <- as.POSIXct(as.character(pulse$TIMESTAMP),format="%m/%d/%Y %H:%M")

pulse[,2:29][pulse[,2:29]>30] <- 0
par(mfrow=c(2,4))
maxS <- c()
minS <- c()
sdminS <- c()
counts <- c()
```

min and maxWC from some calibrations Armin and I did, for "calibration" to GWC

```{r}
maxWC <- c(0.32,0.76)
minWC <- c(0.018,0.045)
```

merging

```{r}
treatments <- read.csv("experiment_2_dry_down_curve_2.csv")
treatments <- treatments[-c(1,16),]
treat <-treatments$Treatment
bc <- treatments$Type
```

number of events there should be in a data set  

```{r}
counts <-ifelse(treat==1.8,36,ifelse(treat==2.7,26,ifelse(treat==5.4,13,ifelse(treat==7.7,9,ifelse(treat==10.0,7,NA)))))
```

rescaling between max and min WC for "calibration"

```{r}
rescaleF <- function(min,max,vwcmin,vwcmax,input){
  output <- ((input - min)*(vwcmax - vwcmin)/(max-min)) + vwcmin
  return(output)
}
```

find average min of lowest 6000 measurements and max peak heights separated by at leat 144 measurements

```{r}
for (i in 2:29){
  tryCatch({
    #plot(pulse[,i],type="l",main=i)
    #abline(h=0.2)
    print(findpeaks(na.omit(pulse[,i]),nups = 1,ndowns = 1,minpeakheight = 0.3,minpeakdistance = 144))
    minS[i-1] <- mean(pulse[order(pulse[,i]),i][1:6000],na.rm=T)
    sdminS[i-1] <- sd(pulse[order(pulse[,i]),i][1:6000],na.rm=T)
    maxS[i-1] <- mean(findpeaks(na.omit(pulse[,i]),nups = 1,ndowns = 1,minpeakheight = 0.3,minpeakdistance = 144)[,1],na.rm=T)
  }, error=function(e){})
}
```

determine a measuremnent noise threshhold as the mean of the min group + 10x stdev of the min group
calculate the duraction above that treshhold, proportion of time wet, number of peaks, 
create rescaled newpulse data
create newpulseWET where data below threshold are set to NA

```{r}
thresh <- minS + 10*sdminS
newthresh <- c()
newpulse <- c()
wetsum <- c()
wetprop <- c()
duration <- c()
peakcount <- c()
newpulse <- matrix(nrow=nrow(pulse),ncol=28)
newpulseWET <- matrix(nrow=nrow(pulse),ncol=28)
newpulseWET2 <- matrix(nrow=nrow(pulse),ncol=28)
par(mfrow=c(2,5))
for(i in 1:28){
  tryCatch({
    newpulse[,i] <- rescaleF(minS[i],maxS[i],minWC[as.numeric(as.factor(bc[i]))],
                         maxWC[as.numeric(as.factor(bc[i]))],pulse[,i+1])
    plot(newpulse[,i],type="l",main=treat[i],cex.main=1,cex.lab=1,ylim=c(0,0.3))
    newthresh[i] <- rescaleF(minS[i],maxS[i],minWC[as.numeric(as.factor(bc[i]))],
                             maxWC[as.numeric(as.factor(bc[i]))],thresh[i])
    abline(h=newthresh[i],lwd=4,col="red")
    wetsum[i] <- length(newpulse[,i][newpulse[,i]>newthresh[i]])/6
    wetprop[i] <- wetsum[i]/(length(newpulse[,i])/6)
    peakcount[i] <- length(findpeaks(newpulse[,i],1,1,minpeakheight=newthresh[i],minpeakdistance = 144)[,1])
    duration[i] <- wetsum[i]/(counts[i])
    newpulseWET[,i] <- ifelse(newpulse[,i]>newthresh[i],newpulse[,i],NA)
    newpulseWET2[,i] <- ifelse(newpulse[,i]>2*newthresh[i],newpulse[,i],NA)
  }, error=function(e){})
}

newthresh <- as.numeric(newthresh)
duration <- as.numeric(duration)

# out.dat <- cbind.data.frame(treatments$?..Sample_Num,treat,bc,wetsum,wetprop,duration)
# write.csv(x = out.dat,file="Corrected_output.csv")
# 
# outVWC.dat <- rbind.data.frame(treatments$?..Sample_Num,treat,bc,newpulse)
# write.csv(x= outVWC.dat,file="Corrected_VWC.csv")
# 
# outWET.dat <- rbind.data.frame(treatments$?..Sample_Num,treat,bc,newpulseWET)
# write.csv(x= outWET.dat,file="WETcrust.csv")
```

rowmeans by treatments for timeseries with thresholds

```{r}
cyano1 <- rowMeans(newpulse[,bc=="cyano"&treat==1.8])
cyano2 <- rowMeans(newpulse[,bc=="cyano"&treat==2.7])
cyano5 <- rowMeans(newpulse[,bc=="cyano"&treat==5.4])
cyano7 <- rowMeans(newpulse[,bc=="cyano"&treat==7.7])
cyano10 <- rowMeans(newpulse[,bc=="cyano"&treat==10.0])

str(newthresh)
threshc1 <- mean(newthresh[bc=="cyano"&treat==1.8])
threshc2 <- mean(newthresh[bc=="cyano"&treat==2.7])
threshc5 <- mean(newthresh[bc=="cyano"&treat==5.4])
threshc7 <- mean(newthresh[bc=="cyano"&treat==7.7])
threshc10 <- mean(newthresh[bc=="cyano"&treat==10.0])


moss1 <- rowMeans(newpulse[,bc=="moss"&treat==1.8])
moss2 <- rowMeans(newpulse[,bc=="moss"&treat==2.7])
moss5 <- rowMeans(newpulse[,bc=="moss"&treat==5.4])
moss7 <- rowMeans(newpulse[,bc=="moss"&treat==7.7])
moss10 <- rowMeans(newpulse[,bc=="moss"&treat==10.0])
threshm1 <- mean(newthresh[bc=="moss"&treat==1.8])
threshm2 <- mean(newthresh[bc=="moss"&treat==2.7])
threshm5 <- mean(newthresh[bc=="moss"&treat==5.4])
threshm7 <- mean(newthresh[bc=="moss"&treat==7.7])
threshm10 <- mean(newthresh[bc=="moss"&treat==10.0])

length(cyano1)
beg <- c(1,4001,8001)
end <- rep(length(cyano1),3)
pdf("CORRECTED_time series with threshold.pdf",height=8, width=6, pointsize=10)
par(mfrow=c(2,2),mar=c(4,4,1,0.5),pty="s")
for(i in 1:1){
plot(cyano1[beg[i]:end[i]],main="Cyano 1",type="l",ylim=c(0,1),xlab="",ylab="water content")
abline(h=threshc1,col="red",lwd=2)
plot(cyano2[beg[i]:end[i]],main="Cyano 2",type="l",ylim=c(0,1),xlab="",ylab="")
abline(h=threshc2,col="red",lwd=2)
plot(cyano5[beg[i]:end[i]],main="Cyano 5",type="l",ylim=c(0,1),xlab="",ylab="")
abline(h=threshc5,col="red",lwd=2)
plot(cyano7[beg[i]:end[i]],main="Cyano 7",type="l",ylim=c(0,1),xlab="",ylab="")
abline(h=threshc7,col="red",lwd=2)
plot(cyano10[beg[i]:end[i]],main="Cyano 10",type="l",ylim=c(0,1),xlab="",ylab="")
abline(h=threshc10,col="red",lwd=2)

plot(moss1[beg[i]:end[i]],main="Moss 1",type="l",ylim=c(0,1),xlab="",ylab="water content")
abline(h=threshm1,col="red",lwd=2)
plot(moss2[beg[i]:end[i]],main="Moss 2",type="l",ylim=c(0,1),xlab="",ylab="")
abline(h=threshm2,col="red",lwd=2)
plot(moss5[beg[i]:end[i]],main="Moss 5",type="l",ylim=c(0,1),xlab="",ylab="")
abline(h=threshm5,col="red",lwd=2)
plot(moss7[beg[i]:end[i]],main="Moss 7",type="l",ylim=c(0,1),xlab="",ylab="")
abline(h=threshm7,col="red",lwd=2)
plot(moss10[beg[i]:end[i]],main="Moss 10",type="l",ylim=c(0,1),xlab="",ylab="")
abline(h=threshm10,col="red",lwd=2)
}
dev.off()
```

```{r}
str(treat)
str(bc)
bc <- as.factor(bc)
```

```{r}
pdf("CORRECTED_boxplot.pdf",height=4, width=8, pointsize=10)
par(mfrow=c(1,3),pty="s")
boxplot(duration~treat*bc,las=2,xlab="",ylab="duration of  wetting event")
boxplot(wetsum~treat*bc,las=2,xlab="",ylab="cumulative time wet")
boxplot(wetprop~treat*bc,las=2,xlab="",ylab="proportion time wet")
dev.off()
```

FOR DRY DOWN CURVES

```{r}
timeinseries <- matrix(nrow=nrow(pulse),ncol=28)
```

create a timeinseries variable that determines when the start of each wetting sequence is, calls
that 1, and then numbers sequentially until the start of the next wetting sequence

```{r}
par(mfrow=c(2,3))
for(i in 1:28){
  for(j in 100:length(newpulseWET[,i])){
    tryCatch({
      timeinseries[j,i] <- ifelse(is.na(mean(newpulseWET[(j-99):(j-1),i],na.rm=T)) & newpulseWET2[j,i]>0,1,
                                  ifelse(timeinseries[j-1,i]>0,timeinseries[j-1,i]+1,NA))
    }, error=function(e){})
  }
  plot(timeinseries[,i],newpulseWET[,i],main=i,ylim=c(0,max(newpulseWET[,i],na.rm=T)))
}

```

vectorize all measurements within a given treatment cyano

```{r}
cyano1 <- as.vector(newpulse[,(bc=="cyano"&treat==1.8)])
```

vectorize time series by a given treatment, convert from 10 minutes to hours
this way of vectorization is a little silly, but this is just to create dry down curves,
will need to add another column with treat and crust to do glm of time series to compare drydowns

```{r}
tc1 <- as.vector(timeinseries[,(bc=="cyano"&treat==1.8)])/6
cyano2 <- as.vector(newpulse[,bc=="cyano"&treat==2.7])
tc2 <- as.vector(timeinseries[,bc=="cyano"&treat==2.7])/6
cyano5 <- as.vector(newpulse[,bc=="cyano"&treat==5.4])
tc5 <- as.vector(timeinseries[,bc=="cyano"&treat==5.4])/6
cyano7 <- as.vector(newpulse[,bc=="cyano"&treat==7.7])
tc7 <- as.vector(timeinseries[,bc=="cyano"&treat==7.7])/6
cyano10 <- as.vector(newpulse[,bc=="cyano"&treat==10.0])
tc10 <- as.vector(timeinseries[,bc=="cyano"&treat==10.0])/6

cyano <- c(cyano1,cyano2,cyano5,cyano7,cyano10)
tc <- c(tc1,tc2,tc5,tc7,tc10)
curveC <- c(rep("c1",length(cyano1)),rep("c2",length(cyano2)),rep("c5",length(cyano5)),rep("c7",length(cyano7)),rep("c10",length(cyano10)))
cyano.tab <- cbind(cyano,tc,curveC)
write.csv(cyano.tab,file="cyanodrydown.csv")

fitC <- drm(cyano~tc,curveid = curveC,fct=EXD.3(fixed=c(0.018,NA,NA)))
#mselect(fitC, list(EXD.2(fixed=c(0.18,NA)),EXD.3(fixed=c(0.18,NA,NA))), linreg=TRUE, icfct=AIC)
fitnoC <- drm(cyano~tc,fct=EXD.3(fixed=c(0.018,NA,NA)))
(anova(fitnoC,fitC))
compParm(fitC,strVal = c("e"))

fitC2 <- drm(cyano~tc,curveid = curveC,fct=EXD.3(fixed=c(minWC[1],maxWC[1],NA)))
anova(fitC,fitC2)
```

using DRC exponential decay model to fit drydown curves

```{r}
par(mfrow=c(2,3))
plot(tc1,cyano1,xlim=c(0,60),ylim=c(0,1))
fitC1 <- drm(cyano1~tc1,fct=EXD.3(fixed=c(0,NA,NA)))
plot(fitC1,log="",add=T,col="red",type="none",lwd=2)
plot(tc2,cyano2,xlim=c(0,60),ylim=c(0,1))
fitC2 <- drm(cyano2~tc2,fct=EXD.3(fixed=c(0,NA,NA)))
plot(fitC2,log="",add=T,col="red",type="none",lwd=2)
plot(tc5,cyano5,xlim=c(0,60),ylim=c(0,1))
fitC5 <- drm(cyano5~tc5,fct=EXD.3(fixed=c(0,NA,NA)))
plot(fitC5,log="",add=T,col="red",type="none",lwd=2)
plot(tc7,cyano7,xlim=c(0,60),ylim=c(0,1))
fitC7 <- drm(cyano7~tc7,fct=EXD.3(fixed=c(0,NA,NA)))
plot(fitC7,log="",add=T,col="red",type="none",lwd=2)
plot(tc10,cyano10,xlim=c(0,60),ylim=c(0,1))
fitC10 <- drm(cyano10~tc10,fct=EXD.3(fixed=c(0,NA,NA)))
plot(fitC10,log="",add=T,col="red",type="none",lwd=2)
```

vectorize all measurements within a given treatment moss

```{r}
moss1 <- as.vector(newpulse[,(bc=="moss"&treat==1.8)])
tm1 <- as.vector(timeinseries[,(bc=="moss"&treat==1.8)])/6
moss2 <- as.vector(newpulse[,bc=="moss"&treat==2.7])
tm2 <- as.vector(timeinseries[,bc=="moss"&treat==2.7])/6
moss5 <- as.vector(newpulse[,bc=="moss"&treat==5.4])
tm5 <- as.vector(timeinseries[,bc=="moss"&treat==5.4])/6
moss7 <- as.vector(newpulse[,bc=="moss"&treat==7.7])
tm7 <- as.vector(timeinseries[,bc=="moss"&treat==7.7])/6
moss10 <- as.vector(newpulse[,bc=="moss"&treat==10.0])
tm10 <- as.vector(timeinseries[,bc=="moss"&treat==10.0])/6


moss <- c(moss1,moss2,moss5,moss7,moss10)
tm <- c(tm1,tm2,tm5,tm7,tm10)
curveM <- c(rep("m1",length(cyano1)),rep("m2",length(cyano2)),rep("m5",length(cyano5)),rep("m7",length(cyano7)),rep("m10",length(cyano10)))
fitM <- drm(moss~tm,curveid = curveM,fct=EXD.3(fixed=c(0.0,NA,NA)))
fitnoM <- drm(moss~tm,fct=EXD.3(fixed=c(0.045,maxWC[2],NA)))
(anova(fitnoM,fitM))
compParm(fitM,strVal = c("e"))

allB <- c(cyano, moss)
allt <- c(tc,tm)
allcurve <- c(curveC,curveM)
fit <- drm(allB~allt,curveid = allcurve,fct=EXD.3(fixed=c(0.031,NA,NA)))
```

using DRC EXD.2 (exponential decay) to fit dry down curves moss

```{r}
par(mfrow=c(2,3))
plot(tm1,moss1,xlim=c(0,60),ylim=c(0,1))
fitM1 <- drm(moss1~tm1,fct=EXD.3(fixed=c(0.0,NA,NA)))
plot(fitM1,log="",add=T,col="red",type="none",lwd=2)
plot(tm2,moss2,xlim=c(0,60),ylim=c(0,1))
fitM2 <- drm(moss2~tm2,fct=EXD.3(fixed=c(0.0,NA,NA)))
plot(fitM2,log="",add=T,col="red",type="none",lwd=2)
plot(tm5,moss5,xlim=c(0,60),ylim=c(0,1))
fitM5 <- drm(moss5~tm5,fct=EXD.3(fixed=c(0.0,NA,NA)))
plot(fitM5,log="",add=T,col="red",type="none",lwd=2)
plot(tm7,moss7,xlim=c(0,60),ylim=c(0,1))
fitM7 <- drm(moss7~tm7,fct=EXD.3(fixed=c(0.0,NA,NA)))
plot(fitM7,log="",add=T,col="red",type="none",lwd=2)
plot(tm10,moss10,xlim=c(0,60),ylim=c(0,1))
fitM10 <- drm(moss10~tm10,fct=EXD.3(fixed=c(0.0,NA,NA)))
plot(fitM10,log="",add=T,col="red",type="none",lwd=2)

ED(fitC,respLev = c(mean(c(threshc1,threshc2,threshc5,threshc7,threshc10))),type="absolute")
ED(fitC1,respLev = c(mean(c(threshc1,threshc2,threshc5,threshc7,threshc10))),type="absolute")
ED(fitC2,respLev = c(mean(c(threshc1,threshc2,threshc5,threshc7,threshc10))),type="absolute")
ED(fitC5,respLev = c(mean(c(threshc1,threshc2,threshc5,threshc7,threshc10))),type="absolute")
ED(fitC7,respLev = c(mean(c(threshc1,threshc2,threshc5,threshc7,threshc10))),type="absolute")
ED(fitC10,respLev = c(mean(c(threshc1,threshc2,threshc5,threshc7,threshc10))),type="absolute")

#ED(fitM,respLev = c(mean(c(threshm1,threshm2,threshm5,threshm7,threshm10))),type="absolute")
ED(fitM1,respLev = c(mean(c(threshm1,threshm2,threshm5,threshm7,threshm10))),type="absolute")
ED(fitM2,respLev = c(mean(c(threshm1,threshm2,threshm5,threshm7,threshm10))),type="absolute")
ED(fitM5,respLev = c(mean(c(threshm1,threshm2,threshm5,threshm7,threshm10))),type="absolute")
ED(fitM7,respLev = c(mean(c(threshm1,threshm2,threshm5,threshm7,threshm10))),type="absolute")
ED(fitM10,respLev = c(mean(c(threshm1,threshm2,threshm5,threshm7,threshm10))),type="absolute")
```

plotting dry down curves with detection threshold

```{r}
pdf("drydowncurves3.pdf",width = 6.50,height=4,pointsize=10)
par(mfrow=c(1,2),pty="s")
plot(fitC1,log="",col=1,type="none",lwd=2,lty="dotted",xlim=c(0,48),ylim=c(0,0.4),ylab="GWC",xlab="Hours since watered",main="Cyano")
plot(fitC2,log="",add=T,col=2,type="none",lwd=2,lty="dotted")
plot(fitC5,log="",add=T,col=3,type="none",lwd=2,lty="dotted")
plot(fitC7,log="",add=T,col=4,type="none",lwd=2,lty="dotted")
plot(fitC10,log="",add=T,col=5,type="none",lwd=2,lty="dotted")
plot(fitC1,log="",add=T,col=1,type="none",lwd=3,xlim=c(0,9.5))
plot(fitC2,log="",add=T,col=2,type="none",lwd=3,xlim=c(0,9.6))
plot(fitC5,log="",add=T,col=3,type="none",lwd=3,xlim=c(0,30.4))
plot(fitC7,log="",add=T,col=4,type="none",lwd=3,xlim=c(0,40.2))
plot(fitC10,log="",add=T,col=5,type="none",lwd=3,xlim=c(0,37.5))
abline(h=mean(c(threshc1,threshc2,threshc5,threshc7,threshc10)))
abline(v=c(9.5,9.6,30.4,40.2,37.5),col=c(1,2,3,4,5),lty="dashed")

plot(fitM1,log="",col=1,type="none",lwd=2,lty="dotted",xlim=c(0,48),ylim=c(0,0.4),ylab="GWC",xlab="Hours since watered",main="Moss")
plot(fitM2,log="",add=T,col=2,type="none",lwd=2,lty="dotted")
plot(fitM5,log="",add=T,col=3,type="none",lwd=2,lty="dotted")
plot(fitM7,log="",add=T,col=4,type="none",lwd=2,lty="dotted")
plot(fitM10,log="",add=T,col=5,type="none",lwd=2,lty="dotted")
plot(fitM1,log="",add=T,col=1,type="none",lwd=3,xlim=c(0,7.8))
plot(fitM2,log="",add=T,col=2,type="none",lwd=3,xlim=c(0,8.4))
plot(fitM5,log="",add=T,col=3,type="none",lwd=3,xlim=c(0,18.5))
plot(fitM7,log="",add=T,col=4,type="none",lwd=3,xlim=c(0,20.9))
abline(h=mean(c(threshm1,threshm2,threshm5,threshm7,threshm10)))
abline(v=c(7.8,8.4,18.5,20.9,35.2),col=c(1,2,3,4,5),lty="dashed")

legend("topright",legend=c("1.8","2.7","5.4","7.7","10.0"),col=c(1,2,3,4,5),lty="solid",lwd=2,bty="n")
dev.off()


summary(AIC(fitM1,fitM2,fitM5,fitM7,fitM10))
```


